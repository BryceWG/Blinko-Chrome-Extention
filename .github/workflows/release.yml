name: Package and Release Chrome Extension

on:
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main # 如果您的默认分支不是 main，请修改这里
    paths:
      - 'manifest.json' # 仅当 manifest.json 文件发生更改时触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 创建 Release 需要此权限

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的git历史记录用于生成changelog

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 您可以指定其他 Node.js 版本

      - name: Install crx
        run: npm install -g crx

      - name: Get extension info from manifest
        id: get_info
        run: |
          EXT_VERSION=$(jq -r .version manifest.json)
          # manifest.json 中的 name 可能是本地化字符串如 __MSG_extensionName__
          # 如果需要更友好的名称，您可能需要在此处进行调整或使用固定名称
          EXT_MANIFEST_NAME=$(jq -r .name manifest.json)
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print $2}')
          
          echo "VERSION=${EXT_VERSION}" >> $GITHUB_OUTPUT
          echo "MANIFEST_NAME=${EXT_MANIFEST_NAME}" >> $GITHUB_OUTPUT
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          
          echo "Extension Version: $EXT_VERSION"
          echo "Extension Manifest Name: $EXT_MANIFEST_NAME"
          echo "Repository Name: $REPO_NAME"

      - name: Create .pem file from secret
        env:
          CRX_PRIVATE_KEY: ${{ secrets.CRX_PRIVATE_KEY }}
        run: |
          if [ -z "$CRX_PRIVATE_KEY" ]; then
            echo "错误：CRX_PRIVATE_KEY secret 未设置。"
            echo "请将您的插件私钥 (.pem 文件内容) 添加到仓库的 Secrets 中，并命名为 CRX_PRIVATE_KEY。"
            exit 1
          fi
          echo "$CRX_PRIVATE_KEY" > key.pem
          echo "私钥文件 key.pem 已创建。"

      - name: Package extension
        id: package
        run: |
          EXT_VERSION=${{ steps.get_info.outputs.VERSION }}
          REPO_NAME=${{ steps.get_info.outputs.REPO_NAME }}
          # 使用仓库名和版本号作为 CRX 文件名
          CRX_FILENAME="${REPO_NAME}-v${EXT_VERSION}.crx"
          
          echo "正在将插件打包到 ${CRX_FILENAME}..."
          # 假设 manifest.json 和所有插件文件都在仓库根目录
          # 如果您的插件文件在子目录 (例如 'src/'), 请将 '.' 更改为 'src/'
          crx pack . -o "${CRX_FILENAME}" -p key.pem
          
          if [ $? -ne 0 ]; then
            echo "CRX 打包失败。"
            # 输出 crx pack 的日志，帮助调试
            # crx pack . -o "${CRX_FILENAME}" -p key.pem --verbose
            exit 1
          fi
          echo "CRX_FILE_PATH=${CRX_FILENAME}" >> $GITHUB_OUTPUT
          echo "插件已成功打包: ${CRX_FILENAME}"

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取最近的两个tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")
          
          # 如果没有找到标签，则使用一些合理的默认值
          if [ -z "$LATEST_TAG" ]; then
            # 如果没有任何标签，使用当前提交作为最新标签
            LATEST_TAG=$(git rev-parse --short HEAD)
            echo "未找到标签，使用当前提交 $LATEST_TAG 作为参考点"
          fi
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果只有一个标签，获取从第一个提交到该标签的范围
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD | head -n 1)
            echo "未找到上一个标签，使用首次提交 $PREVIOUS_TAG 作为参考点"
          fi
          
          echo "最新标签: $LATEST_TAG"
          echo "上一个标签: $PREVIOUS_TAG"
          
          # 生成格式化的changelog并保存到文件
          echo "## 更新内容" > changelog.md
          echo "" >> changelog.md
          
          # 获取两个标签之间的所有提交
          git log --pretty=format:"* %s (by @%an in %h)" $PREVIOUS_TAG..$LATEST_TAG | grep -v "Merge" >> changelog.md
          
          echo "" >> changelog.md
          echo "## 完整更新日志" >> changelog.md
          echo "[${PREVIOUS_TAG}...${LATEST_TAG}](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${LATEST_TAG})" >> changelog.md
          
          cat changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.CRX_FILE_PATH }}
          name: Release v${{ steps.get_info.outputs.VERSION }}
          tag_name: v${{ steps.get_info.outputs.VERSION }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 